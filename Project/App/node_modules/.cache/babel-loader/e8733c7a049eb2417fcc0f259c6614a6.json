{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ghandi\\\\Project\\\\App\\\\src\\\\business-components\\\\jobs\\\\jobs.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { For, If } from 'react-extras';\nimport { useHistory } from 'react-router-dom';\nimport { useTheme } from '@mui/material/styles';\nimport { BackIcon, NextIcon } from '../../assets';\nimport { Button, ButtonSlide } from '../../components';\nimport { ArrowNext, ArrowPrevious, BodyNormal, Content, ContentAlign, H2, H5 } from '../../theme';\nimport { Buttons, Pages, Text } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Jobs = props => {\n  _s();\n\n  const {\n    menuView,\n    visible,\n    jobs,\n    nextPage,\n    prevPage,\n    setMenuView,\n    scrollBar,\n    visibleScroll\n  } = props;\n  const {\n    palette\n  } = useTheme();\n  const history = useHistory();\n  const [active, setActive] = useState(jobs && `${jobs[0].name}`);\n  useEffect(() => {\n    var _ref, _ref2, _ref3, _ref4, _ref5;\n\n    setMenuView({\n      about: {\n        view: true,\n        inProgress: false\n      },\n      metrics: {\n        view: (_ref = menuView.metrics.view || menuView.metrics.inProgress) !== null && _ref !== void 0 ? _ref : false,\n        inProgress: false\n      },\n      links: {\n        view: (_ref2 = menuView.links.view || menuView.links.inProgress) !== null && _ref2 !== void 0 ? _ref2 : false,\n        inProgress: false\n      },\n      jobs: {\n        view: (_ref3 = menuView.jobs.view || menuView.jobs.inProgress) !== null && _ref3 !== void 0 ? _ref3 : false,\n        inProgress: !menuView.jobs.view\n      },\n      deals: {\n        view: (_ref4 = menuView.deals.view || menuView.deals.inProgress) !== null && _ref4 !== void 0 ? _ref4 : false,\n        inProgress: false\n      },\n      contact: {\n        view: (_ref5 = menuView.contact.view || menuView.contact.inProgress) !== null && _ref5 !== void 0 ? _ref5 : false,\n        inProgress: false\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(If, {\n      condition: visible,\n      children: /*#__PURE__*/_jsxDEV(ArrowPrevious, {\n        onClick: () => history.push(prevPage),\n        children: /*#__PURE__*/_jsxDEV(BackIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Content, {\n      style: {\n        position: 'relative',\n        minHeight: '555px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(H2, {\n        primaryColor: palette.primary.main,\n        style: {\n          margin: '10px 20px'\n        },\n        children: \"Jobs que fiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Buttons, {\n        gridTemplateColumns: jobs === null || jobs === void 0 ? void 0 : jobs.length,\n        style: {\n          position: 'relative'\n        },\n        children: /*#__PURE__*/_jsxDEV(For, {\n          of: jobs,\n          render: job => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              title: `${job.name}`,\n              onClick: () => setActive(job.name),\n              active: active === job.name\n            }, job.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this)\n          }, void 0, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContentAlign, {\n        style: {\n          position: 'absolute',\n          maxWidth: '354px',\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(For, {\n          of: jobs,\n          render: job => {\n            return active === job.name ? /*#__PURE__*/_jsxDEV(Pages, {\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: job.image,\n                alt: \"Izabele\",\n                width: \"100%\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Text, {\n                children: [/*#__PURE__*/_jsxDEV(H5, {\n                  primaryColor: palette.primary.main,\n                  children: \"Sobre este projeto\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(BodyNormal, {\n                  primaryColor: palette.primary.main,\n                  children: job.description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 102,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 19\n              }, this)]\n            }, job.description, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this) : '';\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(If, {\n          condition: scrollBar && visibleScroll,\n          children: /*#__PURE__*/_jsxDEV(ButtonSlide, {\n            title: \"Deslize para mais\",\n            visible: visible\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(If, {\n      condition: visible,\n      children: /*#__PURE__*/_jsxDEV(ArrowNext, {\n        onClick: () => history.push(nextPage),\n        children: /*#__PURE__*/_jsxDEV(NextIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Jobs, \"aLWUk1nviP0KgP1EUMy/1dqXdmg=\", false, function () {\n  return [useTheme, useHistory];\n});\n\n_c = Jobs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Jobs\");","map":{"version":3,"sources":["C:/Users/ghandi/Project/App/src/business-components/jobs/jobs.tsx"],"names":["React","useEffect","useState","For","If","useHistory","useTheme","BackIcon","NextIcon","Button","ButtonSlide","ArrowNext","ArrowPrevious","BodyNormal","Content","ContentAlign","H2","H5","Buttons","Pages","Text","Jobs","props","menuView","visible","jobs","nextPage","prevPage","setMenuView","scrollBar","visibleScroll","palette","history","active","setActive","name","about","view","inProgress","metrics","links","deals","contact","push","position","minHeight","primary","main","margin","length","job","maxWidth","width","image","description"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { For, If } from 'react-extras'\nimport { useHistory } from 'react-router-dom'\n\nimport { useTheme } from '@mui/material/styles'\n\nimport { MenuView } from 'models/menu-view'\n\nimport { BackIcon, NextIcon } from '../../assets'\nimport { Button, ButtonSlide } from '../../components'\nimport { ArrowNext, ArrowPrevious, BodyNormal, Content, ContentAlign, H2, H5 } from '../../theme'\nimport { Buttons, Pages, Text } from './styles'\n\ninterface JobProps {\n  name: string\n  description: string\n  image: string\n  result?: {\n    likes?: number\n    comments?: number\n  }\n}\n\ninterface JobsProps {\n  menuView: MenuView\n  visible: boolean\n  jobs?: JobProps[]\n  nextPage?: string\n  prevPage?: string\n  setMenuView: (value: MenuView) => void\n  scrollBar: boolean\n  visibleScroll: boolean\n}\n\nexport const Jobs = (props: JobsProps) => {\n  const { menuView, visible, jobs, nextPage, prevPage, setMenuView, scrollBar, visibleScroll } = props\n\n  const { palette } = useTheme()\n  const history = useHistory()\n\n  const [active, setActive] = useState(jobs && `${jobs[0].name}`)\n\n  useEffect(() => {\n    setMenuView({\n      about: { view: true, inProgress: false },\n      metrics: { view: (menuView.metrics.view || menuView.metrics.inProgress) ?? false, inProgress: false },\n      links: {\n        view: (menuView.links.view || menuView.links.inProgress) ?? false,\n        inProgress: false\n      },\n      jobs: {\n        view: (menuView.jobs.view || menuView.jobs.inProgress) ?? false,\n        inProgress: !menuView.jobs.view\n      },\n      deals: {\n        view: (menuView.deals.view || menuView.deals.inProgress) ?? false,\n        inProgress: false\n      },\n      contact: {\n        view: (menuView.contact.view || menuView.contact.inProgress) ?? false,\n        inProgress: false\n      }\n    })\n  }, [])\n\n  return (\n    <>\n      <If condition={visible}>\n        <ArrowPrevious onClick={() => history.push(prevPage as string)}>\n          <BackIcon />\n        </ArrowPrevious>\n      </If>\n      <Content style={{ position: 'relative', minHeight: '555px' }}>\n        <H2 primaryColor={palette.primary.main} style={{ margin: '10px 20px' }}>\n          Jobs que fiz\n        </H2>\n\n        <Buttons gridTemplateColumns={jobs?.length as number} style={{ position: 'relative' }}>\n          <For\n            of={jobs as JobProps[]}\n            render={job => (\n              <>\n                <Button\n                  key={job.name}\n                  title={`${job.name}`}\n                  onClick={() => setActive(job.name)}\n                  active={active === job.name}\n                />\n              </>\n            )}\n          />\n        </Buttons>\n        <ContentAlign style={{ position: 'absolute', maxWidth: '354px', width: '100%' }}>\n          <For\n            of={jobs as JobProps[]}\n            render={job => {\n              return active === job.name ? (\n                <Pages key={job.description}>\n                  <img src={job.image} alt=\"Izabele\" width=\"100%\" />\n                  <Text>\n                    <H5 primaryColor={palette.primary.main}>Sobre este projeto</H5>\n                    <BodyNormal primaryColor={palette.primary.main}>{job.description}</BodyNormal>\n                  </Text>\n                </Pages>\n              ) : (\n                ''\n              )\n            }}\n          />\n          <If condition={scrollBar && visibleScroll}>\n            <ButtonSlide title=\"Deslize para mais\" visible={visible} />\n          </If>\n        </ContentAlign>\n      </Content>\n      <If condition={visible}>\n        <ArrowNext onClick={() => history.push(nextPage as string)}>\n          <NextIcon />\n        </ArrowNext>\n      </If>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}