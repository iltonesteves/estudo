{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ghandi\\\\Project\\\\App\\\\src\\\\components\\\\copy-text\\\\copy-text.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { ButtonColored } from '..';\nimport { Flex, Subtitle, theme } from '../../theme';\nimport { CopyTextWrapper } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CopyText = props => {\n  _s();\n\n  const {\n    link\n  } = props;\n  const {\n    palette\n  } = useTheme();\n  const [copyText, setCopyText] = useState('copiar');\n  const [backgroundColor, setBackgroundColor] = useState(palette.secondary.main);\n  const [color, setColor] = useState(palette.primary.main);\n  const [checked, setChecked] = useState(false);\n\n  function updateClipboard() {\n    navigator.clipboard.writeText(link).then(() => {\n      setCopyText('copiado');\n      setBackgroundColor(palette.primary.main);\n      setColor(`${theme.colors.white}`);\n      setChecked(true);\n    });\n  }\n\n  function copyLink() {\n    const permissionName = 'clipboard-write';\n    navigator.permissions.query({\n      name: permissionName\n    }).then(result => {\n      if (result.state === 'granted' || result.state === 'prompt') {\n        updateClipboard();\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(CopyTextWrapper, {\n    secondaryColor: palette.secondary.main,\n    children: /*#__PURE__*/_jsxDEV(Flex, {\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Subtitle, {\n        primaryColor: palette.primary.main,\n        id: \"link\",\n        children: link\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ButtonColored, {\n        onClick: copyLink,\n        title: copyText,\n        backgroundColor: backgroundColor,\n        color: color,\n        checked: checked\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CopyText, \"vF3kXkvbo2jqBOStg6WPuC0eZ9M=\", false, function () {\n  return [useTheme];\n});\n\n_c = CopyText;\n\nvar _c;\n\n$RefreshReg$(_c, \"CopyText\");","map":{"version":3,"sources":["C:/Users/ghandi/Project/App/src/components/copy-text/copy-text.tsx"],"names":["React","useState","useTheme","ButtonColored","Flex","Subtitle","theme","CopyTextWrapper","CopyText","props","link","palette","copyText","setCopyText","backgroundColor","setBackgroundColor","secondary","main","color","setColor","primary","checked","setChecked","updateClipboard","navigator","clipboard","writeText","then","colors","white","copyLink","permissionName","permissions","query","name","result","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,QAAT,QAAyB,sBAAzB;AAEA,SAASC,aAAT,QAA8B,IAA9B;AAEA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,KAAzB,QAAsC,aAAtC;AACA,SAASC,eAAT,QAAgC,UAAhC;;AAMA,OAAO,MAAMC,QAAQ,GAAIC,KAAD,IAA0B;AAAA;;AAChD,QAAM;AAAEC,IAAAA;AAAF,MAAWD,KAAjB;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAcT,QAAQ,EAA5B;AAEA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,QAAD,CAAxC;AACA,QAAM,CAACa,eAAD,EAAkBC,kBAAlB,IAAwCd,QAAQ,CAASU,OAAO,CAACK,SAAR,CAAkBC,IAA3B,CAAtD;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAASU,OAAO,CAACS,OAAR,CAAgBH,IAAzB,CAAlC;AACA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,CAAC,KAAD,CAAtC;;AAEA,WAASsB,eAAT,GAA2B;AACzBC,IAAAA,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BhB,IAA9B,EAAoCiB,IAApC,CAAyC,MAAM;AAC7Cd,MAAAA,WAAW,CAAC,SAAD,CAAX;AACAE,MAAAA,kBAAkB,CAACJ,OAAO,CAACS,OAAR,CAAgBH,IAAjB,CAAlB;AACAE,MAAAA,QAAQ,CAAE,GAAEb,KAAK,CAACsB,MAAN,CAAaC,KAAM,EAAvB,CAAR;AACAP,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD,KALD;AAMD;;AAED,WAASQ,QAAT,GAAoB;AAClB,UAAMC,cAAc,GAAG,iBAAvB;AACAP,IAAAA,SAAS,CAACQ,WAAV,CAAsBC,KAAtB,CAA4B;AAAEC,MAAAA,IAAI,EAAEH;AAAR,KAA5B,EAAsDJ,IAAtD,CAA2DQ,MAAM,IAAI;AACnE,UAAIA,MAAM,CAACC,KAAP,KAAiB,SAAjB,IAA8BD,MAAM,CAACC,KAAP,KAAiB,QAAnD,EAA6D;AAC3Db,QAAAA,eAAe;AAChB;AACF,KAJD;AAKD;;AAED,sBACE,QAAC,eAAD;AAAiB,IAAA,cAAc,EAAEZ,OAAO,CAACK,SAAR,CAAkBC,IAAnD;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,cAAc,EAAC,eAArB;AAAA,8BACE,QAAC,QAAD;AAAU,QAAA,YAAY,EAAEN,OAAO,CAACS,OAAR,CAAgBH,IAAxC;AAA8C,QAAA,EAAE,EAAC,MAAjD;AAAA,kBACGP;AADH;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,aAAD;AACE,QAAA,OAAO,EAAEoB,QADX;AAEE,QAAA,KAAK,EAAElB,QAFT;AAGE,QAAA,eAAe,EAAEE,eAHnB;AAIE,QAAA,KAAK,EAAEI,KAJT;AAKE,QAAA,OAAO,EAAEG;AALX;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CA3CM;;GAAMb,Q;UAESN,Q;;;KAFTM,Q","sourcesContent":["import React, { useState } from 'react'\n\nimport { useTheme } from '@mui/material/styles'\n\nimport { ButtonColored } from '..'\n\nimport { Flex, Subtitle, theme } from '../../theme'\nimport { CopyTextWrapper } from './styles'\n\ninterface CopyTextProps {\n  link: string\n}\n\nexport const CopyText = (props: CopyTextProps) => {\n  const { link } = props\n  const { palette } = useTheme()\n\n  const [copyText, setCopyText] = useState('copiar')\n  const [backgroundColor, setBackgroundColor] = useState<string>(palette.secondary.main)\n  const [color, setColor] = useState<string>(palette.primary.main)\n  const [checked, setChecked] = useState(false)\n\n  function updateClipboard() {\n    navigator.clipboard.writeText(link).then(() => {\n      setCopyText('copiado')\n      setBackgroundColor(palette.primary.main)\n      setColor(`${theme.colors.white}`)\n      setChecked(true)\n    })\n  }\n\n  function copyLink() {\n    const permissionName = 'clipboard-write' as PermissionName\n    navigator.permissions.query({ name: permissionName }).then(result => {\n      if (result.state === 'granted' || result.state === 'prompt') {\n        updateClipboard()\n      }\n    })\n  }\n\n  return (\n    <CopyTextWrapper secondaryColor={palette.secondary.main}>\n      <Flex justifyContent=\"space-between\">\n        <Subtitle primaryColor={palette.primary.main} id=\"link\">\n          {link}\n        </Subtitle>\n        <ButtonColored\n          onClick={copyLink}\n          title={copyText}\n          backgroundColor={backgroundColor}\n          color={color}\n          checked={checked}\n        />\n      </Flex>\n    </CopyTextWrapper>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}